name: Test and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-action:
    name: Run security check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run security check
        id: security-check
        uses: ./
        continue-on-error: true
        with:
          target: '.'
          severity: 'LOW'
          html-output: 'reports'
          fail-on-severity: 'CRITICAL'
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
          retention-days: 7
          if-no-files-found: warn

  auto-tag:
    name: Create Auto Tag
    needs: test-action
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.get_latest_tag.outputs.version }}
      release_date: ${{ steps.get_latest_tag.outputs.date }}
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags --force
          git fetch --prune --unshallow || true
          
          # すべてのタグを取得して、セマンティックバージョニングに従うものだけを抽出
          LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
          
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" \< "v1.10.0" ]; then
            # タグが存在しないか、v1.10.0未満の場合は v1.10.0 から開始
            echo "version=v1.10.0" >> $GITHUB_OUTPUT
          else
            # バージョン番号を分解してパッチバージョンをインクリメント
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            PATCH=$((PATCH + 1))
            echo "version=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT
          fi
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ steps.get_latest_tag.outputs.version }} -m "🔖 バージョン ${{ steps.get_latest_tag.outputs.version }} (${{ steps.get_latest_tag.outputs.date }})

          自動生成されたリリースタグ"
          git push origin ${{ steps.get_latest_tag.outputs.version }}

  create-release:
    name: Create Release
    needs: auto-tag
    if: needs.auto-tag.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.auto-tag.outputs.new_tag }}
      
      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: reports/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.auto-tag.outputs.new_tag }}
          name: Version ${{ needs.auto-tag.outputs.new_tag }} - リリース ${{ needs.auto-tag.outputs.release_date }}
          body: |
            ## 🎉 ${{ needs.auto-tag.outputs.new_tag }} リリース (${{ needs.auto-tag.outputs.release_date }})
            
            ### 📦 アーティファクト
            - セキュリティチェックレポートは、このリリースに添付されています。
            
            ### 🔍 注意事項
            - このリリースは自動生成されています。
            - 詳細な変更履歴は README.md を参照してください。
          draft: false
          prerelease: false
          files: |
            reports/*
